class Level3 extends Map {
    
    constructor(player) {
        super(player, null);
        this.width = 32;
        this.height = 32;
        this.ceilingColor = "#1a1a1a";
        this.floorColor = "#290000";
        
        this.player.position.x = this.tileLength * 15 + this.tileLength / 2;
        this.player.position.y = this.tileLength * 4 + this.tileLength / 2; 
        this.player.setViewDirection(Math.PI / 2);
        
        this.map
        
        this.boss = new Boss(16, 16, 150, this, 0.1, 50);
        this.enemies.push(this.boss);
        this.finishTime = 0;
        this.finishTimeLimit = 3;
        
        if (music !== null) {
            music.stop();
        }
        music = Assets.getInstance().playAudio(Assets.getInstance().level3, true, 0.06);
    }
    
    reset() {
        this.tiles = [];
        this.walls = [];
        this.movingWalls = [];
        this.doors = [];
        this.sprites = [];
        this.enemies = [];
        this.items = [];
        this.player.position.x = this.tileLength * 15 + this.tileLength / 2;
        this.player.position.y = this.tileLength * 4 + this.tileLength / 2;
        this.player.setViewDirection(Math.PI / 2);
        this.player.life = 20;
        this.load();
        this.isFinished = false;
        this.boss = new Boss(16, 16, 50, this, 0.1, 50);
        this.enemies.push(this.boss);
    }
    
    update(dt) {
       if (this.boss.isDead) {
           this.finishTime += dt;
           if (this.finishTime >= this.finishTimeLimit) {
               this.isFinished = true;
           }
       }
    }
}


